{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server. For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Sample",
    "contact": {
      "email": "thaitanloi365@gmail.com"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Item",
      "description": "Operations about item"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login",
        "description": "Logs user into the system",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "422": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },
    "/logout": {
      "delete": {
        "tags": ["User"],
        "summary": "Logout",
        "description": "Logs out current logged in user session",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "summary": "Get user's information",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          }
        }
      }
    },

    "/item": {
      "post": {
        "security": ["Bearer"],
        "tags": ["Item"],
        "summary": "Create a new item",
        "description": "This can only be done by the logged in user.",
        "operationId": "createItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": ["Item"],
        "summary": "Edit user's item",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["Item"],
        "summary": "Delete item",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/items": {
      "get": {
        "security": ["Bearer"],
        "tags": ["User"],
        "summary": "Get all item",
        "description": "This can only be done by the logged in user.",
        "operationId": "createItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/changePassword": {
      "patch": {
        "tags": ["User"],
        "summary": "Change password",
        "description": "Changes password",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": ["User"],
        "summary": "Forgot password",
        "description": "Forgot password",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "User email",
            "required": true,
            "type": "string",
            "default": "test@gmail.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/device": {
      "post": {
        "tags": ["User"],
        "summary": "Add device",
        "description": "Add a new device push notification",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Device object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete device",
        "description": "Delete current device push notification when user logged out.",
        "operationId": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "No authorization token was found"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "LoginForm": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "ChangePasswordForm": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string",
          "example": "123456"
        },
        "newPassword": {
          "type": "string",
          "example": "1234"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "Bo"
        },
        "firstName": {
          "type": "string",
          "example": "Thai"
        },
        "lastName": {
          "type": "string",
          "example": "Loi"
        },
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        },
        "phone": {
          "type": "string",
          "example": "+12345678910"
        }
      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "kdkdksjsjs"
        },
        "platform": {
          "type": "string",
          "enum": ["Android", "iOS"],
          "example": "Thai"
        },
        "uuid": {
          "type": "string",
          "example": "1111111"
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Coffee"
        },
        "description": {
          "type": "string",
          "example": "This is my item"
        },
        "price": {
          "type": "number",
          "example": "1000"
        }
      }
    }
  }
}
