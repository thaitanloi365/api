{
  "swagger": "2.0",
  "info": {
    "description": "This is a test server. For this sample, you can use the `access_token` to pass the authorization filters. It should be applied from `Authorize Button`.",
    "version": "1.0.0",
    "title": "Sample",
    "contact": {
      "email": "thaitanloi365@gmail.com"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Item",
      "description": "Operations about item"
    },
    {
      "name": "Upload",
      "description": "Operations about upload files"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login",
        "description": "Logs user into the system",
        "operationId": "login",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginForm"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "422": {
            "description": "Invalid email/password supplied or already exits",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/logout": {
      "delete": {
        "tags": ["User"],
        "summary": "Logout",
        "security": [{ "AccessToken": [] }],
        "description": "Logs out current logged in user session",
        "operationId": "logout",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/definitions/InternalServerError"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Get user's information",
        "description": "This can only be done by the logged in user.",
        "operationId": "user_get",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/definitions/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "user_post",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "user_patch",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },

    "/items": {
      "post": {
        "tags": ["Item"],
        "security": [{ "AccessToken": [] }],
        "summary": "Create a new item",
        "description": "This can only be done by the logged in user.",
        "operationId": "item_post",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": ["Item"],
        "security": [{ "AccessToken": [] }],
        "summary": "Get all item",
        "description": "This can only be done by the logged in user.",
        "operationId": "item_get",
        "produces": ["application/json"],

        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/items/{id}": {
      "patch": {
        "tags": ["Item"],
        "security": [{ "AccessToken": [] }],
        "summary": "Edit user's item",
        "description": "This can only be done by the logged in user.",
        "operationId": "item_id_patch",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": ["Item"],
        "security": [{ "AccessToken": [] }],
        "summary": "Delete item",
        "description": "This can only be done by the logged in user.",
        "operationId": "item_id_delete",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "security": [{ "AccessToken": [] }],
        "tags": ["Item"],
        "summary": "Get a item",
        "description": "This can only be done by the logged in user.",
        "operationId": "item_id_get",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/upload": {
      "post": {
        "tags": ["Upload"],
        "security": [{ "AccessToken": [] }],
        "summary": "Upload image",
        "description": "Upload image to AWS, maximum file size is 2MB",
        "operationId": "upload_post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "File to update",
            "required": true
          },
          {
            "in": "formData",
            "name": "width",
            "type": "string",
            "description": "Desired width of image to resize"
          },
          {
            "in": "formData",
            "name": "height",
            "type": "string",
            "description": "Desired height of image to resize"
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "User Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": ["Upload"],
        "security": [{ "AccessToken": [] }],
        "summary": "Upload image",
        "description": "Upload image to AWS, maximum file size is 2MB",
        "operationId": "upload_put",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "description": "File to update",
            "required": true
          },
          {
            "in": "formData",
            "name": "width",
            "type": "string",
            "description": "Desired width of image",
            "required": true
          },
          {
            "in": "formData",
            "name": "height",
            "type": "string",
            "description": "Desired height of image",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "User Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/changePassword": {
      "patch": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Change password",
        "description": "Changes password",
        "operationId": "changePassword",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "User Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Forgot password",
        "description": "Forgot password",
        "operationId": "forgotPassword",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "User email",
            "required": true,
            "type": "string",
            "default": "test@gmail.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/device": {
      "post": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Add device",
        "description": "Add a new device push notification",
        "operationId": "device_post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Device object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success with data will be returned.",
            "schema": {
              "$ref": "#/definitions/SuccessWithData"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "security": [{ "AccessToken": [] }],
        "summary": "Delete device",
        "description": "Delete current device push notification when user logged out.",
        "operationId": "device_delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "401": {
            "description": "No authorization token was found",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntity"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "in": "header",
      "name": "access_token",
      "description": "The access token for authorize user. It can get once login successfully."
    }
  },
  "definitions": {
    "Success": {
      "required": ["message", "code", "data"],
      "properties": {
        "code": {
          "description": "Success",
          "type": "integer",
          "example": 200
        },
        "message": {
          "description": "Success",
          "type": "string",
          "example": "Login Success"
        },
        "data": {
          "description": "Success",
          "type": "object",
          "example": null
        }
      },
      "type": "object"
    },
    "SuccessWithData": {
      "required": ["message", "code", "data"],
      "properties": {
        "code": {
          "description": "Success",
          "type": "integer",
          "example": 201
        },
        "message": {
          "description": "Success",
          "type": "string",
          "example": "Login Success"
        },
        "data": {
          "description": "Success",
          "type": "object",
          "example": {
            "token": "123456789"
          }
        }
      },
      "type": "object"
    },
    "NotFound": {
      "required": ["error", "statusCode"],
      "properties": {
        "error": {
          "description": "Couldn't found ",
          "type": "string",
          "example": "Object not found"
        },
        "statusCode": {
          "description": "Assigned StatusCode, is used in order to create a relationship between Error and Response.",
          "type": "integer",
          "format": "int64",
          "example": 404
        }
      },
      "type": "object"
    },
    "Forbidden": {
      "required": ["error", "statusCode"],
      "properties": {
        "error": {
          "description": "Given error, describes the problem.",
          "type": "string",
          "example": "No Permission for this action"
        },
        "statusCode": {
          "description": "Assigned StatusCode, is used in order to create a relationship between Error and Response.",
          "type": "integer",
          "format": "int64",
          "example": 401
        }
      },
      "type": "object"
    },
    "UnprocessableEntity": {
      "required": ["error", "statusCode"],
      "properties": {
        "error": {
          "description": "A filed that displays the missing property.",
          "type": "string",
          "example": "Email is required"
        },
        "statusCode": {
          "description": "Assigned StatusCode, is used in order to create a relationship between Error and Response.",
          "type": "integer",
          "format": "int64",
          "example": 422
        }
      },
      "type": "object"
    },
    "InternalServerError": {
      "required": ["error", "statusCode"],
      "properties": {
        "error": {
          "description": "Given error (not formatted), describes the problem.",
          "type": "string",
          "example": "Internal Server Error"
        },
        "statusCode": {
          "description": "Assigned StatusCode, is used in order to create a relationship between Error and Response.",
          "type": "integer",
          "format": "int64",
          "example": 500
        }
      },
      "type": "object"
    },
    "LoginForm": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "ChangePasswordForm": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string",
          "example": "123456"
        },
        "newPassword": {
          "type": "string",
          "example": "1234"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "Bo"
        },
        "firstName": {
          "type": "string",
          "example": "Thai"
        },
        "lastName": {
          "type": "string",
          "example": "Loi"
        },
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        },
        "phone": {
          "type": "string",
          "example": "+12345678910"
        },
        "avatar": {
          "type": "string",
          "example": "https://www.facebook.com/images/fb_icon_325x325.png"
        }
      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "kdkdksjsjs"
        },
        "platform": {
          "type": "string",
          "enum": ["Android", "iOS"],
          "example": "Thai"
        },
        "uuid": {
          "type": "string",
          "example": "1111111"
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Coffee"
        },
        "description": {
          "type": "string",
          "example": "This is my item"
        },
        "price": {
          "type": "number",
          "example": "1000"
        }
      }
    }
  }
}
